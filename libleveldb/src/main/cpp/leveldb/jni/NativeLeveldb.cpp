// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from leveldb.idl

#include "NativeLeveldb.hpp"  // my header
#include "Marshal.hpp"
#include "NativeStatus.hpp"
#include "NativeWriteBatch.hpp"

namespace djinni_generated {

NativeLeveldb::NativeLeveldb() : ::djinni::JniInterface<::dd::Leveldb, NativeLeveldb>("cc/eevee/djinni/leveldb/Leveldb$CppProxy") {}

NativeLeveldb::~NativeLeveldb() = default;


CJNIEXPORT void JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::dd::Leveldb>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::dd::Leveldb::create();
        return ::djinni::release(::djinni_generated::NativeLeveldb::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_00024CppProxy_native_1open(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dd::Leveldb>(nativeRef);
        auto r = ref->open(::djinni::String::toCpp(jniEnv, j_name));
        return ::djinni::release(::djinni_generated::NativeStatus::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_00024CppProxy_native_1get(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dd::Leveldb>(nativeRef);
        auto r = ref->get(::djinni::String::toCpp(jniEnv, j_key));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_00024CppProxy_native_1getDef(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jstring j_def)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dd::Leveldb>(nativeRef);
        auto r = ref->get_def(::djinni::String::toCpp(jniEnv, j_key),
                              ::djinni::String::toCpp(jniEnv, j_def));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_00024CppProxy_native_1put(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key, jstring j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dd::Leveldb>(nativeRef);
        auto r = ref->put(::djinni::String::toCpp(jniEnv, j_key),
                          ::djinni::String::toCpp(jniEnv, j_value));
        return ::djinni::release(::djinni_generated::NativeStatus::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_00024CppProxy_native_1del(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_key)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dd::Leveldb>(nativeRef);
        auto r = ref->del(::djinni::String::toCpp(jniEnv, j_key));
        return ::djinni::release(::djinni_generated::NativeStatus::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_00024CppProxy_native_1write(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_batch)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dd::Leveldb>(nativeRef);
        auto r = ref->write(::djinni_generated::NativeWriteBatch::toCpp(jniEnv, j_batch));
        return ::djinni::release(::djinni_generated::NativeStatus::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_00024CppProxy_native_1close(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dd::Leveldb>(nativeRef);
        auto r = ref->close();
        return ::djinni::release(::djinni_generated::NativeStatus::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_cc_eevee_djinni_leveldb_Leveldb_00024CppProxy_native_1result(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dd::Leveldb>(nativeRef);
        auto r = ref->result();
        return ::djinni::release(::djinni_generated::NativeStatus::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
