// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from leveldb.idl

package cc.eevee.djinni.leveldb;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Leveldb {
    @NonNull
    public abstract Status open(@NonNull String name);

    @NonNull
    public abstract String get(@NonNull String key);

    @NonNull
    public abstract String getDef(@NonNull String key, @NonNull String def);

    @NonNull
    public abstract Status put(@NonNull String key, @NonNull String value);

    @NonNull
    public abstract Status del(@NonNull String key);

    @NonNull
    public abstract Status write(@Nullable WriteBatch batch);

    @NonNull
    public abstract Status close();

    @NonNull
    public abstract Status result();

    @Nullable
    public static native Leveldb create();

    private static final class CppProxy extends Leveldb
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public Status open(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_open(this.nativeRef, name);
        }
        private native Status native_open(long _nativeRef, String name);

        @Override
        public String get(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_get(this.nativeRef, key);
        }
        private native String native_get(long _nativeRef, String key);

        @Override
        public String getDef(String key, String def)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDef(this.nativeRef, key, def);
        }
        private native String native_getDef(long _nativeRef, String key, String def);

        @Override
        public Status put(String key, String value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_put(this.nativeRef, key, value);
        }
        private native Status native_put(long _nativeRef, String key, String value);

        @Override
        public Status del(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_del(this.nativeRef, key);
        }
        private native Status native_del(long _nativeRef, String key);

        @Override
        public Status write(WriteBatch batch)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_write(this.nativeRef, batch);
        }
        private native Status native_write(long _nativeRef, WriteBatch batch);

        @Override
        public Status close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_close(this.nativeRef);
        }
        private native Status native_close(long _nativeRef);

        @Override
        public Status result()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_result(this.nativeRef);
        }
        private native Status native_result(long _nativeRef);
    }
}
